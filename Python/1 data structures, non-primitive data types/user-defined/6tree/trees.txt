A Tree is a non-linear data structure and a hierarchy consisting of a collection of nodes such that each node of the tree stores a value and a list of references to other nodes (the “children”).
This data structure is a specialized method to organize and store data in the computer to be used more effectively.

1 Trees
Just like a real life tree 
(analogy is attached as an image)

1.1 Non-Binary Trees
Tree can have any number of nodes and nodes can have any number of childrens.

1.2 Binary Trees (0-2 children)
A type of type that have minimum 0 or maximum 2 children. 

1.2.1 Perfect Binary Tree 
All nodes have 2 childrens.
All leaf nodes are on same level.

1.2.2 Full Binary Tree 
Every node have either 0 or 2 children. No node should have 1 children only. 

1.2.3 Binary Search Trees 
Binary trees where 
- every left node is smaller than the root node 
- every right node is larger than the root node 
- every left and right node are also Binary Search Sub-Trees 

1.2.3.1 Un-Balanced BST
The tree looks like tree is growing in one specific direction, eventually performing like a LinkedList.

1.2.3.2 Balanced BST
The tree is well balances and left half is symetrical to right half of the tree. (left and right of the root)

1.2.3.2.1 AVL and RedBlack Trees
Balanced BST's with self balancing property.


--------------------------------------------

Applications of Trees:
Storing naturally hierarchical data: Trees are used to store the data in the hierarchical structure. For example, the file system. The file system stored on the disc drive, the file and folder are in the form of the naturally hierarchical data and stored in the form of trees.
Organize data: It is used to organize data for efficient insertion, deletion and searching. For example, a binary tree has a logN time for searching an element.
Trie: It is a special kind of tree that is used to store the dictionary. It is a fast and efficient way for dynamic spell checking.
Heap: It is also a tree data structure implemented using arrays. It is used to implement priority queues.
B-Tree and B+Tree: B-Tree and B+Tree are the tree data structures used to implement indexing in databases.
DOM in HTML.

Advantages:
The searching operation in a binary tree is very fast.
The representation of a binary tree is simple and easy to understand.
Traversing from a parent node to its child node and vice-versa is efficiently done.

Disadvantages:
The access operation in a Binary Search Tree (BST) is slower than in an array.
Deleating operation is a mess.
